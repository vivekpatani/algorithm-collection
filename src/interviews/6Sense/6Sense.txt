

https://s3.amazonaws.com/istreet-assets/dAC5NK8IHY-jK1FVz0er7g/Question1.txt
/**

1. What does class NoName do? What will this code output?
2. How will the memory usage of NoName grow over time?
3. Please rewrite or update the code to be more memory efficient with large inputs.

**/

class NoName {

    func constructor () {
        this.dict = dict();
    }

    func helper_func(v) {
        if (v not in this.dict.keys()) {
            this.dict[v] = [v, [v]];
        }

        while (v != this.dict[v][0]) {
            v = this.dict[v][0];
        }

        return v;
    }

    func add (items) {
        for (item in items) {
            a = item[0];
            b = item[1];
            result_a = this.helper_func(a);
            result_b = this.helper_func(b);

            if (result_a != result_b) {
                if (this.dict[result_a][1].length > this.dict[result_b][1].length) {
                    this.dict[result_a][1].merge(this.dict[result_b][1]);
                    this.dict[result_b][0] = a;
                } else {
                    this.dict[result_b][1].merge(this.dict[result_a][1]);
                    this.dict[result_a][0] = b;
                }
            }
        }
    }

    func print () {
        for (n in this.dict.keys()) {
            r = this.helper_func(this.dict[n][0]);
            print '{}: {}'.format(n, this.dict[r][1]);
        }
    }

}
   
instance = new NoName();
instance.add([
    ('alice', 'bob'),
    ('bob', 'caspar'),
    ('jasmine', 'oscar'),
    ('jasmine', 'steve'),
    ('oscar', 'zed'),
    ('oscar', 'steve'),
    ('steve', 'zed')
]);
instance.print();


https://s3.amazonaws.com/istreet-assets/jdIsO-mxYmGdTt9Qm_nI0Q/Question2.txt
/**

1. What does no_name_one do?
2. Please optimize the code below.
3. What are the pros and cons of a recursive vs interative implementation?

**/

func no_name_one (a, b) {
    if (a.length != b.length) {
        return false;
    }

    for(x = 0; x < b.length; x++) {
        if (a[0] == b[x]) {
            return no_name_one(no_name_two(a, 0), no_name_two(b, x));
        }
    }
    return b.length == 0;
}

func no_name_two(s, j) {
    ret = new char[s.length - 1];
    d = 0;
    for(k = 0; k < s.length; k++) {
        if (k == j) {
            d = 1
        } else {
            ret[k - d] = s[k]
        }
    }

    return new String(ret);
}
